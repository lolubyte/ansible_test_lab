# {{ ansible_managed }}

#
# When we also provide SSL we have to listen to the
# the HTTPS port in addition.
#

{% if httpd_ssl_Listen is defined %}
  {% if httpd_ssl_Listen %}
Listen {{ httpd_ssl_Listen }}
  {% else %}
#Listen 443 https
  {% endif %}
{% else %}
Listen 443 https
{% endif %}

##
##  SSL Global Context
##
##  All SSL configuration in this context applies both to
##  the main server and all SSL-enabled virtual hosts.
##

#   Pass Phrase Dialog:
#   Configure the pass phrase gathering process.
#   The filtering dialog program (`builtin' is a internal
#   terminal dialog) has to provide the pass phrase on stdout.

{% if httpd_ssl_SSLPassPhraseDialog is defined %}
  {% if httpd_ssl_SSLPassPhraseDialog %}
SSLPassPhraseDialog {{ httpd_ssl_SSLPassPhraseDialog }}
  {% else %}
#SSLPassPhraseDialog exec:/usr/libexec/httpd-ssl-pass-dialog
  {% endif %}
{% else %}
SSLPassPhraseDialog exec:/usr/libexec/httpd-ssl-pass-dialog
{% endif %}

#   Inter-Process Session Cache:
#   Configure the SSL Session Cache: First the mechanism
#   to use and second the expiring timeout (in seconds).

{% if httpd_ssl_SSLSessionCache is defined %}
  {% if httpd_ssl_SSLSessionCache %}
SSLSessionCache {{ httpd_ssl_SSLSessionCache }}
  {% else %}
#SSLSessionCache         shmcb:/run/httpd/sslcache(512000)
  {% endif %}
{% else %}
SSLSessionCache         shmcb:/run/httpd/sslcache(512000)
{% endif %}

{% if httpd_ssl_SSLSessionCacheTimeout is defined %}
  {% if httpd_ssl_SSLSessionCacheTimeout %}
SSLSessionCacheTimeout {{ httpd_ssl_SSLSessionCacheTimeout }}
  {% else %}
#SSLSessionCacheTimeout  300
  {% endif %}
{% else %}
SSLSessionCacheTimeout  300
{% endif %}

#   Pseudo Random Number Generator (PRNG):
#   Configure one or more sources to seed the PRNG of the
#   SSL library. The seed data should be of good random quality.
#   WARNING! On some platforms /dev/random blocks if not enough entropy
#   is available. This means you then cannot use the /dev/random device
#   because it would lead to very long connection times (as long as
#   it requires to make more entropy available). But usually those
#   platforms additionally provide a /dev/urandom device which doesn't
#   block. So, if available, use this one instead. Read the mod_ssl User
#   Manual for more details.

{% if httpd_ssl_SSLRandomSeed is defined %}
  {% if httpd_ssl_SSLRandomSeed %}
    {% for seed in httpd_ssl_SSLRandomSeed %}
SSLRandomSeed {{ seed }}
    {% endfor %}
  {% else %}
#SSLRandomSeed startup file:/dev/urandom  256
#SSLRandomSeed connect builtin
#SSLRandomSeed startup file:/dev/random  512
#SSLRandomSeed connect file:/dev/random  512
#SSLRandomSeed connect file:/dev/urandom 512
  {% endif %}
{% else %}
SSLRandomSeed startup file:/dev/urandom  256
SSLRandomSeed connect builtin
#SSLRandomSeed startup file:/dev/random  512
#SSLRandomSeed connect file:/dev/random  512
#SSLRandomSeed connect file:/dev/urandom 512
{% endif %}

#
# Use "SSLCryptoDevice" to enable any supported hardware
# accelerators. Use "openssl engine -v" to list supported
# engine names.  NOTE: If you enable an accelerator and the
# server does not start, consult the error logs and ensure
# your accelerator is functioning properly.
#

{% if httpd_ssl_SSLCryptoDevice is defined %}
  {% if httpd_ssl_SSLCryptoDevice %}
SSLCryptoDevice {{ httpd_ssl_SSLCryptoDevice }}
  {% else %}
#SSLCryptoDevice builtin
#SSLCryptoDevice ubsec
  {% endif %}
{% else %}
SSLCryptoDevice builtin
#SSLCryptoDevice ubsec
{% endif %}

##
## SSL Virtual Host Context
##

{% if httpd_ssl_VirtualHost is defined %}
  {% if httpd_ssl_VirtualHost %}
    {% for vh in httpd_ssl_VirtualHost %}
<VirtualHost {{ vh.VirtualHost }}>

# General setup for the virtual host, inherited from global configuration
      {% if vh.DocumentRoot is defined %}
        {% if vh.DocumentRoot %}
DocumentRoot "{{ vh.DocumentRoot }}"
        {% else %}
#DocumentRoot "/var/www/html"
        {% endif %}
      {% else %}
#DocumentRoot "/var/www/html"
      {% endif %}

      {% if vh.ServerName is defined %}
        {% if vh.ServerName %}
ServerName "{{ vh.ServerName }}"
        {% else %}
#ServerName www.example.com:443
        {% endif %}
      {% else %}
#ServerName www.example.com:443
      {% endif %}

# Use separate log files for the SSL virtual host; note that LogLevel
# is not inherited from httpd.conf.
      {% if vh.ErrorLog is defined %}
        {% if vh.ErrorLog %}
ErrorLog "{{ vh.ErrorLog }}"
        {% else %}
#ErrorLog logs/ssl_error_log
        {% endif %}
      {% else %}
ErrorLog logs/ssl_error_log
      {% endif %}

      {% if vh.TransferLog is defined %}
        {% if vh.TransferLog %}
TransferLog "{{ vh.TransferLog }}"
        {% else %}
#TransferLog logs/ssl_access_log
        {% endif %}
      {% else %}
TransferLog logs/ssl_access_log
      {% endif %}

      {% if vh.LogLevel is defined %}
        {% if vh.LogLevel %}
LogLevel "{{ vh.LogLevel }}"
        {% else %}
#LogLevel warn
        {% endif %}
      {% else %}
LogLevel warn
      {% endif %}

#   SSL Engine Switch:
#   Enable/Disable SSL for this virtual host.
      {% if vh.SSLEngine is defined %}
        {% if vh.SSLEngine %}
SSLEngine "{{ vh.SSLEngine }}"
        {% else %}
#SSLEngine on
        {% endif %}
      {% else %}
SSLEngine on
      {% endif %}

#   SSL Protocol support:
# List the enable protocol levels with which clients will be able to
# connect.  Disable SSLv2 access by default:
      {% if vh.SSLProtocol is defined %}
        {% if vh.SSLProtocol %}
SSLProtocol "{{ vh.SSLProtocol }}"
        {% else %}
#SSLProtocol all -SSLv2 -SSLv3
        {% endif %}
      {% else %}
SSLProtocol all -SSLv2 -SSLv3
      {% endif %}

#   SSL Cipher Suite:
#   List the ciphers that the client is permitted to negotiate.
#   See the mod_ssl documentation for a complete list.
      {% if vh.SSLCipherSuite is defined %}
        {% if vh.SSLCipherSuite %}
SSLCipherSuite "{{ vh.SSLCipherSuite }}"
        {% else %}
#SSLCipherSuite HIGH:3DES:!aNULL:!MD5:!SEED:!IDEA
        {% endif %}
      {% else %}
SSLCipherSuite HIGH:3DES:!aNULL:!MD5:!SEED:!IDEA
      {% endif %}

#   Speed-optimized SSL Cipher configuration:
#   If speed is your main concern (on busy HTTPS servers e.g.),
#   you might want to force clients to specific, performance
#   optimized ciphers. In this case, prepend those ciphers
#   to the SSLCipherSuite list, and enable SSLHonorCipherOrder.
#   Caveat: by giving precedence to RC4-SHA and AES128-SHA
#   (as in the example below), most connections will no longer
#   have perfect forward secrecy - if the server's key is
#   compromised, captures of past or future traffic must be
#   considered compromised, too.
      {% if vh.SSLHonorCipherOrder is defined %}
        {% if vh.SSLHonorCipherOrder %}
SSLHonorCipherOrder "{{ vh.SSLHonorCipherOrder }}"
        {% else %}
#SSLHonorCipherOrder on
        {% endif %}
      {% else %}
#SSLHonorCipherOrder on
      {% endif %}

#   Server Certificate:
# Point SSLCertificateFile at a PEM encoded certificate.  If
# the certificate is encrypted, then you will be prompted for a
# pass phrase.  Note that a kill -HUP will prompt again.  A new
# certificate can be generated using the genkey(1) command.
      {% if vh.SSLCertificateFile is defined %}
        {% if vh.SSLCertificateFile %}
SSLCertificateFile "{{ vh.SSLCertificateFile }}"
        {% else %}
#SSLCertificateFile /etc/pki/tls/certs/localhost.crt
        {% endif %}
      {% else %}
SSLCertificateFile /etc/pki/tls/certs/localhost.crt
      {% endif %}

#   Server Private Key:
#   If the key is not combined with the certificate, use this
#   directive to point at the key file.  Keep in mind that if
#   you've both a RSA and a DSA private key you can configure
#   both in parallel (to also allow the use of DSA ciphers, etc.)
      {% if vh.SSLCertificateKeyFile is defined %}
        {% if vh.SSLCertificateKeyFile %}
SSLCertificateKeyFile "{{ vh.SSLCertificateKeyFile }}"
        {% else %}
#SSLCertificateKeyFile /etc/pki/tls/private/localhost.key
        {% endif %}
      {% else %}
SSLCertificateKeyFile /etc/pki/tls/private/localhost.key
      {% endif %}

#   Server Certificate Chain:
#   Point SSLCertificateChainFile at a file containing the
#   concatenation of PEM encoded CA certificates which form the
#   certificate chain for the server certificate. Alternatively
#   the referenced file can be the same as SSLCertificateFile
#   when the CA certificates are directly appended to the server
#   certificate for convinience.
      {% if vh.SSLCertificateChainFile is defined %}
        {% if vh.SSLCertificateChainFile %}
SSLCertificateChainFile "{{ vh.SSLCertificateChainFile }}"
        {% else %}
#SSLCertificateChainFile /etc/pki/tls/certs/server-chain.crt
        {% endif %}
      {% else %}
#SSLCertificateChainFile /etc/pki/tls/certs/server-chain.crt
      {% endif %}

#   Certificate Authority (CA):
#   Set the CA certificate verification path where to find CA
#   certificates for client authentication or alternatively one
#   huge file containing all of them (file must be PEM encoded)
      {% if vh.SSLCACertificateFile is defined %}
        {% if vh.SSLCACertificateFile %}
SSLCACertificateFile "{{ vh.SSLCACertificateFile }}"
        {% else %}
#SSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt
        {% endif %}
      {% else %}
#SSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt
      {% endif %}

#   Client Authentication (Type):
#   Client certificate verification type and depth.  Types are
#   none, optional, require and optional_no_ca.  Depth is a
#   number which specifies how deeply to verify the certificate
#   issuer chain before deciding the certificate is not valid.
      {% if vh.SSLVerifyClient is defined %}
        {% if vh.SSLVerifyClient %}
SSLVerifyClient "{{ vh.SSLVerifyClient }}"
        {% else %}
#SSLVerifyClient require
        {% endif %}
      {% else %}
#SSLVerifyClient require
      {% endif %}

#   Client Authentication (Type):
#   Client certificate verification type and depth.  Types are
#   none, optional, require and optional_no_ca.  Depth is a
#   number which specifies how deeply to verify the certificate
#   issuer chain before deciding the certificate is not valid.
      {% if vh.SSLVerifyDepth is defined %}
        {% if vh.SSLVerifyDepth %}
SSLVerifyDepth "{{ vh.SSLVerifyDepth }}"
        {% else %}
#SSLVerifyDepth  10
        {% endif %}
      {% else %}
#SSLVerifyDepth  10
      {% endif %}

#   Access Control:
#   With SSLRequire you can do per-directory access control based
#   on arbitrary complex boolean expressions containing server
#   variable checks and other lookup directives.  The syntax is a
#   mixture between C and Perl.  See the mod_ssl documentation
#   for more details.
#<Location />
#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
#            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
#            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
#           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
#</Location>

#   SSL Engine Options:
#   Set various options for the SSL engine.
#   o FakeBasicAuth:
#     Translate the client X.509 into a Basic Authorisation.  This means that
#     the standard Auth/DBMAuth methods can be used for access control.  The
#     user name is the `one line' version of the client's X.509 certificate.
#     Note that no password is obtained from the user. Every entry in the user
#     file needs this password: `xxj31ZMTZzkVA'.
#   o ExportCertData:
#     This exports two additional environment variables: SSL_CLIENT_CERT and
#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
#     server (always existing) and the client (only existing when client
#     authentication is used). This can be used to import the certificates
#     into CGI scripts.
#   o StdEnvVars:
#     This exports the standard SSL/TLS related `SSL_*' environment variables.
#     Per default this exportation is switched off for performance reasons,
#     because the extraction step is an expensive operation and is usually
#     useless for serving static content. So one usually enables the
#     exportation for CGI and SSI requests only.
#   o StrictRequire:
#     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
#     under a "Satisfy any" situation, i.e. when it applies access is denied
#     and no other module can change it.
#   o OptRenegotiate:
#     This enables optimized SSL connection renegotiation handling when SSL
#     directives are used in per-directory context.

      {% if vh.SSLOptions is defined %}
        {% if vh.SSLOptions %}
SSLOptions "{{ vh.SSLOptions }}"
        {% else %}
#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
        {% endif %}
      {% else %}
#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
      {% endif %}

      {% if vh.Files is defined %}
        {% if vh.Files %}
<Files ~ "{{ vh.Files }}">
    SSLOptions {{ vh.Files.options}}
</Files>
        {% else %}
#<Files ~ "\.(cgi|shtml|phtml|php3?)$">
#    SSLOptions +StdEnvVars
#</Files>
        {% endif %}
      {% else %}
<Files ~ "\.(cgi|shtml|phtml|php3?)$">
    SSLOptions +StdEnvVars
</Files>
      {% endif %}

	 {% if vh.Directory is defined %}
        {% if vh.Directory %}
<Directory "{{ vh.Directory }}">
    SSLOptions {{ vh.Directory.options}}
</Directory>
        {% else %}
#<Directory "/var/www/cgi-bin">
#    SSLOptions +StdEnvVars
#</Directory>
        {% endif %}
      {% else %}
<Directory "/var/www/cgi-bin">
    SSLOptions +StdEnvVars
</Directory>
      {% endif %}

#   SSL Protocol Adjustments:
#   The safe and default but still SSL/TLS standard compliant shutdown
#   approach is that mod_ssl sends the close notify alert but doesn't wait for
#   the close notify alert from client. When you need a different shutdown
#   approach you can use one of the following variables:
#   o ssl-unclean-shutdown:
#     This forces an unclean shutdown when the connection is closed, i.e. no
#     SSL close notify alert is send or allowed to received.  This violates
#     the SSL/TLS standard but is needed for some brain-dead browsers. Use
#     this when you receive I/O errors because of the standard approach where
#     mod_ssl sends the close notify alert.
#   o ssl-accurate-shutdown:
#     This forces an accurate shutdown when the connection is closed, i.e. a
#     SSL close notify alert is send and mod_ssl waits for the close notify
#     alert of the client. This is 100% SSL/TLS standard compliant, but in
#     practice often causes hanging connections with brain-dead browsers. Use
#     this only for browsers where you know that their SSL implementation
#     works correctly.
#   Notice: Most problems of broken clients are also related to the HTTP
#   keep-alive facility, so you usually additionally want to disable
#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
#   "force-response-1.0" for this.
	  {% if vh.BrowserMatch is defined %}
        {% if vh.BrowserMatch %}
BrowserMatch {{ vh.BrowserMatch }}
        {% else %}
#BrowserMatch "MSIE [2-5]" \
#         nokeepalive ssl-unclean-shutdown \
#         downgrade-1.0 force-response-1.0
        {% endif %}
      {% else %}
BrowserMatch "MSIE [2-5]" \
         nokeepalive ssl-unclean-shutdown \
         downgrade-1.0 force-response-1.0
      {% endif %}

#   Per-Server Logging:
#   The home of a custom SSL log file. Use this when you want a
#   compact non-error SSL logfile on a virtual host basis.
	  {% if vh.CustomLog is defined %}
        {% if vh.CustomLog %}
CustomLog {{ vh.CustomLog }}
        {% else %}
#CustomLog logs/ssl_request_log \
#          "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
        {% endif %}
      {% else %}
CustomLog logs/ssl_request_log \
          "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
      {% endif %}

</VirtualHost>
    {% endfor %}
  {% else %}

  {% endif %}
{% else %}

<VirtualHost _default_:443>

# General setup for the virtual host, inherited from global configuration
#DocumentRoot "/var/www/html"
#ServerName www.example.com:443

# Use separate log files for the SSL virtual host; note that LogLevel
# is not inherited from httpd.conf.
ErrorLog logs/ssl_error_log
TransferLog logs/ssl_access_log
LogLevel warn

#   SSL Engine Switch:
#   Enable/Disable SSL for this virtual host.
SSLEngine on

#   SSL Protocol support:
# List the enable protocol levels with which clients will be able to
# connect.  Disable SSLv2 access by default:
SSLProtocol all -SSLv2 -SSLv3

#   SSL Cipher Suite:
#   List the ciphers that the client is permitted to negotiate.
#   See the mod_ssl documentation for a complete list.
SSLCipherSuite HIGH:3DES:!aNULL:!MD5:!SEED:!IDEA

#   Speed-optimized SSL Cipher configuration:
#   If speed is your main concern (on busy HTTPS servers e.g.),
#   you might want to force clients to specific, performance
#   optimized ciphers. In this case, prepend those ciphers
#   to the SSLCipherSuite list, and enable SSLHonorCipherOrder.
#   Caveat: by giving precedence to RC4-SHA and AES128-SHA
#   (as in the example below), most connections will no longer
#   have perfect forward secrecy - if the server's key is
#   compromised, captures of past or future traffic must be
#   considered compromised, too.
#SSLCipherSuite RC4-SHA:AES128-SHA:HIGH:MEDIUM:!aNULL:!MD5
#SSLHonorCipherOrder on

#   Server Certificate:
# Point SSLCertificateFile at a PEM encoded certificate.  If
# the certificate is encrypted, then you will be prompted for a
# pass phrase.  Note that a kill -HUP will prompt again.  A new
# certificate can be generated using the genkey(1) command.
SSLCertificateFile /etc/pki/tls/certs/localhost.crt

#   Server Private Key:
#   If the key is not combined with the certificate, use this
#   directive to point at the key file.  Keep in mind that if
#   you've both a RSA and a DSA private key you can configure
#   both in parallel (to also allow the use of DSA ciphers, etc.)
SSLCertificateKeyFile /etc/pki/tls/private/localhost.key

#   Server Certificate Chain:
#   Point SSLCertificateChainFile at a file containing the
#   concatenation of PEM encoded CA certificates which form the
#   certificate chain for the server certificate. Alternatively
#   the referenced file can be the same as SSLCertificateFile
#   when the CA certificates are directly appended to the server
#   certificate for convinience.
#SSLCertificateChainFile /etc/pki/tls/certs/server-chain.crt

#   Certificate Authority (CA):
#   Set the CA certificate verification path where to find CA
#   certificates for client authentication or alternatively one
#   huge file containing all of them (file must be PEM encoded)
#SSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt

#   Client Authentication (Type):
#   Client certificate verification type and depth.  Types are
#   none, optional, require and optional_no_ca.  Depth is a
#   number which specifies how deeply to verify the certificate
#   issuer chain before deciding the certificate is not valid.
#SSLVerifyClient require
#SSLVerifyDepth  10

#   Access Control:
#   With SSLRequire you can do per-directory access control based
#   on arbitrary complex boolean expressions containing server
#   variable checks and other lookup directives.  The syntax is a
#   mixture between C and Perl.  See the mod_ssl documentation
#   for more details.
#<Location />
#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
#            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
#            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
#           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
#</Location>

#   SSL Engine Options:
#   Set various options for the SSL engine.
#   o FakeBasicAuth:
#     Translate the client X.509 into a Basic Authorisation.  This means that
#     the standard Auth/DBMAuth methods can be used for access control.  The
#     user name is the `one line' version of the client's X.509 certificate.
#     Note that no password is obtained from the user. Every entry in the user
#     file needs this password: `xxj31ZMTZzkVA'.
#   o ExportCertData:
#     This exports two additional environment variables: SSL_CLIENT_CERT and
#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
#     server (always existing) and the client (only existing when client
#     authentication is used). This can be used to import the certificates
#     into CGI scripts.
#   o StdEnvVars:
#     This exports the standard SSL/TLS related `SSL_*' environment variables.
#     Per default this exportation is switched off for performance reasons,
#     because the extraction step is an expensive operation and is usually
#     useless for serving static content. So one usually enables the
#     exportation for CGI and SSI requests only.
#   o StrictRequire:
#     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
#     under a "Satisfy any" situation, i.e. when it applies access is denied
#     and no other module can change it.
#   o OptRenegotiate:
#     This enables optimized SSL connection renegotiation handling when SSL
#     directives are used in per-directory context.
#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
<Files ~ "\.(cgi|shtml|phtml|php3?)$">
    SSLOptions +StdEnvVars
</Files>
<Directory "/var/www/cgi-bin">
    SSLOptions +StdEnvVars
</Directory>

#   SSL Protocol Adjustments:
#   The safe and default but still SSL/TLS standard compliant shutdown
#   approach is that mod_ssl sends the close notify alert but doesn't wait for
#   the close notify alert from client. When you need a different shutdown
#   approach you can use one of the following variables:
#   o ssl-unclean-shutdown:
#     This forces an unclean shutdown when the connection is closed, i.e. no
#     SSL close notify alert is send or allowed to received.  This violates
#     the SSL/TLS standard but is needed for some brain-dead browsers. Use
#     this when you receive I/O errors because of the standard approach where
#     mod_ssl sends the close notify alert.
#   o ssl-accurate-shutdown:
#     This forces an accurate shutdown when the connection is closed, i.e. a
#     SSL close notify alert is send and mod_ssl waits for the close notify
#     alert of the client. This is 100% SSL/TLS standard compliant, but in
#     practice often causes hanging connections with brain-dead browsers. Use
#     this only for browsers where you know that their SSL implementation
#     works correctly.
#   Notice: Most problems of broken clients are also related to the HTTP
#   keep-alive facility, so you usually additionally want to disable
#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
#   "force-response-1.0" for this.
BrowserMatch "MSIE [2-5]" \
         nokeepalive ssl-unclean-shutdown \
         downgrade-1.0 force-response-1.0

#   Per-Server Logging:
#   The home of a custom SSL log file. Use this when you want a
#   compact non-error SSL logfile on a virtual host basis.
CustomLog logs/ssl_request_log \
          "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

</VirtualHost>
{% endif %}
